# -*- coding: utf-8 -*-
"""self_cashier_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ASGReqKUu-fGLUZndeZS-q5rtTEPeCz
"""

from logging import exception
from tabulate import tabulate

# Membuat objek class Transaction
class Transaction():

    # Menginisialisasi special method (__init__)
    def __init__(self):
        """
        Fungsi untuk menginisialisasi list_item
        """

        # Membuat list kosong untuk menyimpan data dictionary
        self.list_items = []

    # Method untuk menambahkan item ke dalam list_items
    def add_item(self, nama_item , jumlah_item , harga_item ):
        """
        Fungsi untuk menambahkan item belanja

        Parameter:
        ----------
        data : dict
              Berisi nama item, jumlah item, harga item, dan total harga

        nama_item : str
              Nama item yang ingin diinputkan

        jumlah_item : int
              Jumlah item yang ingin diinputkan

        harga_item : int/float
              Harga item yang ingin diinputkan

        returns:
        --------
        None

        """

        # Cek error dan waspada jika terjadi error
        try:

            # Membuat dictionary untuk item yang ditambahkan
            data = {
                  "nama_item": nama_item,
                  "jumlah_item": jumlah_item,
                  "harga_item": harga_item,
                  "total_harga" : jumlah_item * harga_item
                  }

            # Kondisi jika tipe nama_item bukan string
            if type(data["nama_item"]) != str:

              # Pesan error ketika tipe nama_item bukan string
              raise ValueError("Nama item tidak sesuai")

            # Kondisi jika tipe jumlah_item bukan integer atau bernilai negatif
            if type(data["jumlah_item"]) != int or data["jumlah_item"] < 0:

              # Pesan error ketika tipe jumlah_item bukan integer atau bernilai negatif
              raise ValueError("Jumlah item harus angka dan tidak negatif")

            # Kondisi jika tipe harga_item bukan integer atau bernilai negatif
            if type(data["harga_item"]) != int or data["harga_item"] < 0:

              # Pesan error ketika tipe harga_item bukan integer atau bernilai negatif
              raise ValueError("Harga item harus angka dan tidak negatif")

            # Menambahkan item ke dalam list_items
            self.list_items.append(data)

        # Menangkap pesan tiap-tiap error
        except Exception as e:
          print(f"Terdapat kesalahan dalam input data : {e}")

    # Method untuk memperbarui nama item jika ada kesalahan
    def update_item_name(self, nama_item, item_baru):
        """
        Method untuk mengubah nama item yang sudah diinput

        Parameter:
          nama_item : str
              Nama item yang ingin diubah

          item_baru : str
              Nama item yang baru

        return:
        -------
          None

        """

        # Cek error dan waspada jika terjadi error
        try:

            # Perulangan untuk mengubah nama item
            for item in self.list_items:

              # Kondisi jika nama_item sesuai
              if item['nama_item'] == nama_item:

                  # Menghubah nama_item menjadi item_baru
                  item['nama_item'] = item_baru

        # Menampilkan pesan error jika nama_item tidak sesuai
        except:
            raise exception ("Nama item tidak sesuai")

    # Method untuk memperbarui jumlah item jika ada kesalahan
    def update_item_qty(self, nama_item, jumlah_baru):
        """
        Method untuk mengubah jumlah item yang sudah diinput

        Parameter:
          nama_item : str
              Nama item yang ingin diubah

          jumlah_baru : int
              Jumlah item yang baru

        return:
        -------
          None

        """

        # Cek error dan waspada jika terjadi error
        try:

            # Perulangan untuk mengubah jumlah item
            for item in self.list_items:

              # Kondisi jika nama_item sesuai
              if item['nama_item'] == nama_item:

                  # Menghubah jumlah_item menjadi jumlah_baru
                  item['jumlah_item'] = jumlah_baru

                  # Kondisi jika jumlah_baru bukan angka atau kurang dari nol
                  if type(jumlah_baru) != int or jumlah_baru < 0:

                        # Akan muncul tulisan 'Error' pada kolom jumlah item
                        item['total_harga'] = "Error"

                        # Pesan eror jika jumlah_baru bukan angka atau kurang dari nol
                        raise ValueError("Jumlah item harus angka dan tidak negatif")

                  # Kondisi jika jumlah_baru berupa angka dan lebih nol
                  else:

                    # Akan muncul total harga baru pada kolom total harga
                    item['total_harga'] = jumlah_baru * item['harga_item']
                    print(f"Jumlah item {item['nama_item']} berhasil dirubah!")

              # Kondisi jika nama_item tidak sesuai
              else :

                  # Pesan eror ketika nama_item tidak sesuai
                  raise ValueError("Data tidak ditemukan")

        # Menangkap pesan error
        except Exception as e:
          print(f"Terdapat kesalahan dalam input data : {e}")

    # Method untuk memperbarui harga item jika ada kesalahan
    def update_item_price(self, nama_item, harga_baru):
        """
        Method untuk mengubah harga item yang sudah diinput

        Parameter:
        ----------
          nama_item : str
              Nama item yang ingin diubah

          harga_baru : int
              Harga item yang baru

        Return:
        -------
          None

        """

        # Cek error dan waspada jika terjadi error
        try:
            # Perulangan untuk mengubah harga item
            for item in self.list_items:

              # Kondisi jika nama_item sesuai
              if item['nama_item'] == nama_item:

                  # Menghubah harga_item menjadi harga_baru
                  item['harga_item'] = harga_baru

                  # Kondisi jika harga_baru bukan angka atau kurang dari nol
                  if type(harga_baru) != int or harga_baru < 0:

                      # Akan muncul tulisan 'Error' pada kolom total harga
                      item['total_harga'] = "Error"

                      # Pesan eror jika harga_baru bukan angka atau kurang dari nol
                      raise ValueError("Jumlah item harus angka dan tidak negatif")

                  # Kondisi jika harga_baru berupa angka dan lebih nol
                  else:

                    # Akan muncul total harga baru pada kolom total harga
                    item['total_harga'] = item['jumlah_item'] * harga_baru
                    print(f"Harga item {item['nama_item']} berhasil dirubah!")

              # Kondisi jika nama_item tidak sesuai
              else :

                  # Menampilkan pesan eror data tidak ditemukan
                  raise ValueError("Data tidak ditemukan")

        # Menangkap pesan error
        except Exception as e:
          print(f"Terdapat kesalahan dalam input data : {e}")

    # Method untuk menghapus hanya satu baris item
    def delete_item(self, nama_item):
        """
        Method untuk menghapus item yang sudah diinput

        Parameter:
        ----------
          nama_item : str
              Nama item yang ingin dihapus

        Return:
        -------
          None

        """

        # Cek error dan waspada jika terjadi error
        try:
          # Menghapus baris item yang ada di list_item
          for item in self.list_items:

            # Kondisi jika nama_item yang akan dihapus tersedia
            if item['nama_item'] == nama_item:

                # Menghapus item hanya satu baris
                self.list_items.remove(item)
                print(f"Item {item['nama_item']} berhasil dihapus!")

        # Pesan eror jika nama_item yang akan dihapus tidak tersedia
        except ValueError:
          print('Data dalam list tidak ada')

    # Method untuk menghapus semua item
    def reset_transaction(self):
        """
        Method untuk menghapus seluruh item yang sudah diinput

        """
        # Menghapus semua item yang ada di list_item
        self.list_items.clear()
        print("Semua item berhasil dihapus!")

    # Method untuk memeriksa item yang telah dimasukkan ke dalam list_items
    def check_order(self):
        """
        Fungsi untuk menampilkan data transaksi yang telah dibuat

        """

        # Cek error dan waspada jika terjadi error
        try:

            if not self.list_items:
              print("Tidak ada daftar transaksi")
              return

            # Perulangan item pada list_item untuk mengetahui apakah inputan sudah benar
            for item in self.list_items:

              # Kondisi jika dalam item ada inputan kosong ''
              if '' in item:
                print("Nama item, jumlah item, dan harga item tidak boleh kosong")

              # Kondisi jika tipe nama_item bukan string
              if type(item["nama_item"]) != str:

                # Pesan error ketika tipe nama_item bukan string
                raise ValueError("Nama item tidak sesuai")

              # Kondisi jika tipe jumlah_item bukan integer atau bernilai negatif
              if type(item["jumlah_item"]) != int or item["jumlah_item"] < 0:

                # Pesan error ketika tipe jumlah_item bukan integer atau bernilai negatif
                raise ValueError("Jumlah item harus angka dan tidak negatif")

              # Kondisi jika tipe harga_item bukan integer atau bernilai negatif
              if type(item["harga_item"]) != int or item["harga_item"] < 0:

                # Pesan error ketika tipe harga_item bukan integer atau bernilai negatif
                raise ValueError("Harga item harus angka dan tidak negatif")

              # Kondisi jika tidak terjadi kesalahan pada inputan
            else:
              print("Input item sudah benar")

        # Menangkap pesan setiap error
        except Exception as e:
          print(f"Terdapat kesalahan dalam input data : {e}")

        # Membuat header tabel daftar transaksi
        headers = ["Nama Item", "Jumlah Item", "Harga Item", "Total Harga"]

        # Membuat baris tabel daftar transaksi
        rows = [[item['nama_item'], item['jumlah_item'], item['harga_item'], item['total_harga']] for item in self.list_items]

        print("Daftar transaksi anda:")

        # Menampilkan tabel daftar transaksi menggunakan library tabulate
        print(tabulate(rows, headers=headers, tablefmt="grid"))


    # Method untuk menghitung total harga akhir
    def total_price(self):
        """
        Method untuk menghitung total akhir transaksi
        dan menampilkan diskon jika memenuhi kondisi yang ada

        """
        # Cek error dan waspada jika terjadi error
        try:
            # Total harga awal adalah 0
            total_harga_akhir = 0

            #perulangan untuk menghitung total harga
            for item in self.list_items:

              # Total harga akhir ditambah dengan total_harga
              total_harga_akhir += item['total_harga']

            # Kondisi ketika total harga lebih dari 500.000
            if total_harga_akhir > 500_000:

                # Menghitung total harga akhir ketika mendapat diskon 10%
                total = total_harga_akhir * 0.9
                print(f"Selamat! Anda Mendapatkan Diskon 10%\nTotal Belanja Anda Setelah Diskon Sebesar Rp. {total}")

            # Kondisi ketika total harga lebih dari 300.000
            elif total_harga_akhir > 300_000:

                # Menghitung total harga akhir ketika mendapat diskon 8%
                total = total_harga_akhir * 0.92
                print(f"Selamat! Anda Mendapatkan Diskon 8%\nTotal Belanja Anda Setelah Diskon Sebesar Rp. {total}")

            # Kondisi ketika total harga lebih dari 200.000
            elif total_harga_akhir > 200_000:

                # Menghitung total harga akhir ketika mendapat diskon 5%
                total = total_harga_akhir * 0.95
                print(f"Selamat! Anda Mendapatkan Diskon 5%\nTotal Belanja Anda Setelah Diskon Sebesar Rp. {total}")

            # Kondisi ketika total harga kurang dari 200.000 dan tidak mendapat diskon
            else:
                print(f"Total Belanja Anda Sebesar Rp. {total_harga_akhir}")

        # Pesan eror jika total harga akhir tidak ada
        except ValueError:
                print('Total harga akhir tidak ada')